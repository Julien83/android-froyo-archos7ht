

= Introduction =

This section details the steps required to setup and configure your Linux environment in preparation for building Android. 


= Details =

 1. Install the following packages (most are necessary utilities you will need throughout the course of the build):

 a) Open a terminal and enter the following: 

_apt-get install git-core gnupg flex bison gperf libsdl-dev libesd0-dev libwxgtk2.6-dev build-essential zip curl libncurses5-dev zlib1g-dev patch gzip cpio mkcramfs lunch_

 b) Install Sun Java 5  (not available on current Linux distros...must add repos)

 c) Add the necessary repositories to your software sources:

_deb http://us.archive.ubuntu.com/ubuntu/ jaunty main restricted_

_deb http://us.archive.ubuntu.com/ubuntu/ jaunty-updates main restricted_

_deb http://us.archive.ubuntu.com/ubuntu/ jaunty multiverse_

_deb http://us.archive.ubuntu.com/ubuntu/ jaunty-updates multiverse_


 c) Install the JDK:

_apt-get install sun-java5-jdk_


 d) Configure the JVM / JDK (Select Java 5 from the list of options for JVM):

_update-alternatives --config java_


 2. Install Valgrind (Find memory leaks, stack corruption, array bounds overflows)

_apt-get install valgrind_



 3. Install GCC and G++ 4.3 (Not Latest Version)


 a) Install earlier version by opening terminal and:

_sudo apt-get install gcc-4.1 gcc-4.3 g++-4.3_


 b) Install alternatives by opening terminal and:

_sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.3 20_

_sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.3 20_

_sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30_

_sudo update-alternatives --set cc /usr/bin/gcc_

_sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30_

_sudo update-alternatives --set c++ /usr/bin/g++_



 c) Configure alternatives by opening terminal and:

_sudo update-alternatives  -- config gcc_

_sudo update-alternavtives -- config g++_
			

 4. Install Repo Script (Tool for using Git with Android)

 a) Create a build-specific directory under your home and user folder:

_mkdir android-froyo_

 b) Add the build-specific folder to the PATH:

_export PATH=/home/lt/android-froyo:$PATH_

 c) Verify that the bin folder is now in the PATH listing:

_echo $PATH_

 d) Download the Repo script and make sure it's executable:

_curl http://android.git.kernel.org/repo >~/android-froyo/repo 

_chmod a+x ~/android-froyo/repo

 e) Initialize the repo client:

_cd /android-froyo_

_repo init -u git://github.com/thaplague/android_archos7ht_repo.git_
		

 f) Pull down the Android files to your working directory:

_repo sync_


 5. Git Tag Input and Verification (must be done as root) 

 a) Load the following public key into your GnuPG key database. The key is used to sign annotated tags that represent releases. 

_sudo gpg --import_

 b) Paste the key(s) below, and press Control-D to end the input and process the keys. 



-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.2.2 (GNU/Linux)
mQGiBEnnWD4RBACt9/h4v9xnnGDou13y3dvOx6/t43LPPIxeJ8eX9WB+8LLuROSV
lFhpHawsVAcFlmi7f7jdSRF+OvtZL9ShPKdLfwBJMNkU66/TZmPewS4m782ndtw7
8tR1cXb197Ob8kOfQB3A9yk2XZ4ei4ZC3i6wVdqHLRxABdncwu5hOF9KXwCgkxMD
u4PVgChaAJzTYJ1EG+UYBIUEAJmfearb0qRAN7dEoff0FeXsEaUA6U90sEoVks0Z
wNj96SA8BL+a1OoEUUfpMhiHyLuQSftxisJxTh+2QclzDviDyaTrkANjdYY7p2cq
/HMdOY7LJlHaqtXmZxXjjtw5Uc2QG8UY8aziU3IE9nTjSwCXeJnuyvoizl9/I1S5
jU5SA/9WwIps4SC84ielIXiGWEqq6i6/sk4I9q1YemZF2XVVKnmI1F4iCMtNKsR4
MGSa1gA8s4iQbsKNWPgp7M3a51JCVCu6l/8zTpA+uUGapw4tWCp4o0dpIvDPBEa9
b/aF/ygcR8mh5hgUfpF9IpXdknOsbKCvM9lSSfRciETykZc4wrRCVGhlIEFuZHJv
aWQgT3BlbiBTb3VyY2UgUHJvamVjdCA8aW5pdGlhbC1jb250cmlidXRpb25AYW5k
cm9pZC5jb20+iGAEExECACAFAknnWD4CGwMGCwkIBwMCBBUCCAMEFgIDAQIeAQIX
gAAKCRDorT+BmrEOeNr+AJ42Xy6tEW7r3KzrJxnRX8mij9z8tgCdFfQYiHpYngkI
2t09Ed+9Bm4gmEO5Ag0ESedYRBAIAKVW1JcMBWvV/0Bo9WiByJ9WJ5swMN36/vAl
QN4mWRhfzDOk/Rosdb0csAO/l8Kz0gKQPOfObtyYjvI8JMC3rmi+LIvSUT9806Up
hisyEmmHv6U8gUb/xHLIanXGxwhYzjgeuAXVCsv+EvoPIHbY4L/KvP5x+oCJIDbk
C2b1TvVk9PryzmE4BPIQL/NtgR1oLWm/uWR9zRUFtBnE411aMAN3qnAHBBMZzKMX
LWBGWE0znfRrnczI5p49i2YZJAjyX1P2WzmScK49CV82dzLo71MnrF6fj+Udtb5+
OgTg7Cow+8PRaTkJEW5Y2JIZpnRUq0CYxAmHYX79EMKHDSThf/8AAwUIAJPWsB/M
pK+KMs/s3r6nJrnYLTfdZhtmQXimpoDMJg1zxmL8UfNUKiQZ6esoAWtDgpqt7Y7s
KZ8laHRARonte394hidZzM5nb6hQvpPjt2OlPRsyqVxw4c/KsjADtAuKW9/d8phb
N8bTyOJo856qg4oOEzKG9eeF7oaZTYBy33BTL0408sEBxiMior6b8LrZrAhkqDjA
vUXRwm/fFKgpsOysxC6xi553CxBUCH2omNV6Ka1LNMwzSp9ILz8jEGqmUtkBszwo
G1S8fXgE0Lq3cdDM/GJ4QXP/p6LiwNF99faDMTV3+2SAOGvytOX6KjKVzKOSsfJQ
hN0DlsIw8hqJc0WISQQYEQIACQUCSedYRAIbDAAKCRDorT+BmrEOeCUOAJ9qmR0l
EXzeoxcdoafxqf6gZlJZlACgkWF7wi2YLW3Oa+jv2QSTlrx4KLM=
=Wi5D
-----END PGP PUBLIC KEY BLOCK-----

 c) After importing the keys, you can verify any tag with:

_git tag -v tagname_ 






