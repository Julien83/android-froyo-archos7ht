
= Introduction =

This page details the steps required to configure your Linux machine for building AOSP.  Instructions are written based on Debian / Ubuntu. 

= Details =

 1. Setting up AOSP (Debian Environment)


 1.1. Install the following packages (most are necessary utilities you will need throughout the course of the build): 

      a) Open a terminal and enter the following: 

<i>apt-get install git-core gnupg flex bison gperf libsdl-dev libesd0-dev libwxgtk2.6-dev 	build-essential zip curl libncurses5-dev zlib1g-dev patch gzip cpio mkcramfs lunch</i>


 1.2. Install Sun Java 5  (not available on current Linux distros...must add repos)

      a) Add the necessary repositories to your software sources:

		deb http://us.archive.ubuntu.com/ubuntu/ jaunty main restricted
		deb http://us.archive.ubuntu.com/ubuntu/ jaunty-updates main restricted
		deb http://us.archive.ubuntu.com/ubuntu/ jaunty multiverse
		deb http://us.archive.ubuntu.com/ubuntu/ jaunty-updates multiverse

      b) Install the JDK:

		<i>apt-get install sun-java5-jdk</i>

      c) Configure the JVM / JDK:

		<i>update-alternatives --config java</i>

		Select Java 5 from the list of options for JVM. 



 1.3. Install Valgrind (Find memory leaks, stack corruption, array bounds overflows)

		<i>apt-get install valgrind</i>



 1.4. Install GCC and G++ 4.3 (Not Latest Version)

      a) Install earlier version by opening terminal and:

		<i>sudo apt-get install gcc-4.1 gcc-4.3 g++-4.3</i>	

      b) Install alternatives by opening terminal and:

		<i>sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.3 20</i>
		<i>sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.3 20</i>

		<i>sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30</i>
		 <i>sudo update-alternatives --set cc /usr/bin/gcc<i>

		 <i>sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30</i>
		 <i>sudo update-alternatives --set c++ /usr/bin/g++<i>

      c) Configure alternatives by opening terminal and:

		<i>sudo update-alternatives  -- config gcc</i>
		<i>sudo update-alternavtives -- config g++</i>



 1.5. Install Repo Script (Tool for using Git with Android)

      a) Create a build-specific directory under your home and user folder:

		<i>cd /home/lt</i>
		<i>mkdir android-froyo</i>

      b) Add the build-specific folder to the PATH:

		<i>export PATH=/home/lt/android-froyo:$PATH</i>		

      c) Verify that the bin folder is now in the PATH listing:
		
		<i>echo $PATH</i>
		ex.: /home/lt/android-froyo:/usr/local/bin:/usr/bin:/bin:/usr/games

      d) Download the Repo script and make sure it's executable:

		<i>curl http://android.git.kernel.org/repo >~/android-froyo/repo</i>

		<i>chmod a+x ~/android-froyo/repo (using chmod to change permissions)</i>

      e) Initialize the repo client (http://sites.google.com/a/android.com/opensource/download)

		<i>cd /android-froyo</i>
		<i>repo init -u git://android.git.kernel.org/platform/manifest.git</i> 
		<i>(Add -b froyo (or whatever version name) to specify version.)</i>		
		<i>repo init -u git://github.com/thaplague/android_archos7ht_repo.git</i>	

      f) Pull down the Android files to your working directory:

		<i>repo sync</i>


 1.6. Git Tag Input and Verfication (must be done as root) 

      a) Load the following public key into your GnuPG key database.The key is used to sign annotated tags that represent releases. 
		
		<i>sudo gpg --import</i>


      b) Paste the key(s) below, and press Control-D to end the input and process the keys. 

(http://sites.google.com/a/android.com/opensource/download)
Key 9AB10E78: "The Android Open Source Projectinitial-contribution@android.com" :

-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.2.2 (GNU/Linux)
mQGiBEnnWD4RBACt9/h4v9xnnGDou13y3dvOx6/t43LPPIxeJ8eX9WB+8LLuROSV
lFhpHawsVAcFlmi7f7jdSRF+OvtZL9ShPKdLfwBJMNkU66/TZmPewS4m782ndtw7
8tR1cXb197Ob8kOfQB3A9yk2XZ4ei4ZC3i6wVdqHLRxABdncwu5hOF9KXwCgkxMD
u4PVgChaAJzTYJ1EG+UYBIUEAJmfearb0qRAN7dEoff0FeXsEaUA6U90sEoVks0Z
wNj96SA8BL+a1OoEUUfpMhiHyLuQSftxisJxTh+2QclzDviDyaTrkANjdYY7p2cq
/HMdOY7LJlHaqtXmZxXjjtw5Uc2QG8UY8aziU3IE9nTjSwCXeJnuyvoizl9/I1S5
jU5SA/9WwIps4SC84ielIXiGWEqq6i6/sk4I9q1YemZF2XVVKnmI1F4iCMtNKsR4
MGSa1gA8s4iQbsKNWPgp7M3a51JCVCu6l/8zTpA+uUGapw4tWCp4o0dpIvDPBEa9
b/aF/ygcR8mh5hgUfpF9IpXdknOsbKCvM9lSSfRciETykZc4wrRCVGhlIEFuZHJv
aWQgT3BlbiBTb3VyY2UgUHJvamVjdCA8aW5pdGlhbC1jb250cmlidXRpb25AYW5k
cm9pZC5jb20+iGAEExECACAFAknnWD4CGwMGCwkIBwMCBBUCCAMEFgIDAQIeAQIX
gAAKCRDorT+BmrEOeNr+AJ42Xy6tEW7r3KzrJxnRX8mij9z8tgCdFfQYiHpYngkI
2t09Ed+9Bm4gmEO5Ag0ESedYRBAIAKVW1JcMBWvV/0Bo9WiByJ9WJ5swMN36/vAl
QN4mWRhfzDOk/Rosdb0csAO/l8Kz0gKQPOfObtyYjvI8JMC3rmi+LIvSUT9806Up
hisyEmmHv6U8gUb/xHLIanXGxwhYzjgeuAXVCsv+EvoPIHbY4L/KvP5x+oCJIDbk
C2b1TvVk9PryzmE4BPIQL/NtgR1oLWm/uWR9zRUFtBnE411aMAN3qnAHBBMZzKMX
LWBGWE0znfRrnczI5p49i2YZJAjyX1P2WzmScK49CV82dzLo71MnrF6fj+Udtb5+
OgTg7Cow+8PRaTkJEW5Y2JIZpnRUq0CYxAmHYX79EMKHDSThf/8AAwUIAJPWsB/M
pK+KMs/s3r6nJrnYLTfdZhtmQXimpoDMJg1zxmL8UfNUKiQZ6esoAWtDgpqt7Y7s
KZ8laHRARonte394hidZzM5nb6hQvpPjt2OlPRsyqVxw4c/KsjADtAuKW9/d8phb
N8bTyOJo856qg4oOEzKG9eeF7oaZTYBy33BTL0408sEBxiMior6b8LrZrAhkqDjA
vUXRwm/fFKgpsOysxC6xi553CxBUCH2omNV6Ka1LNMwzSp9ILz8jEGqmUtkBszwo
G1S8fXgE0Lq3cdDM/GJ4QXP/p6LiwNF99faDMTV3+2SAOGvytOX6KjKVzKOSsfJQ
hN0DlsIw8hqJc0WISQQYEQIACQUCSedYRAIbDAAKCRDorT+BmrEOeCUOAJ9qmR0l
EXzeoxcdoafxqf6gZlJZlACgkWF7wi2YLW3Oa+jv2QSTlrx4KLM=
=Wi5D
-----END PGP PUBLIC KEY BLOCK-----

     c) After importing the keys, you can verify any tag with:

		<i>git tag -v tagname</i> 
